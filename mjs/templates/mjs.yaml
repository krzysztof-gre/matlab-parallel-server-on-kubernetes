# Templates for the MATLAB Job Scheduler config files and controller deployment.
# Copyright 2024 The MathWorks, Inc.

{{- $jobManagerHostname := "mjs-job-manager" }}
{{- $logBase := "/mjs/log" }}
{{- $isNonRoot := ne (int .Values.jobManagerUserID) 0 }}
{{- if (and $isNonRoot (empty .Values.logPVC)) }} # If running as non-root user and not mounting log directory, use a directory that a non-root user can create
{{- $logBase = "/tmp/log" }}
{{- end }}
{{- $matlabRoot := "/opt/matlab" }}
{{- $mjsDefDir := "/mjs/config" }}
{{- $secretDir := "/mjs/secret" }}
{{- $secretFileName := "secret.json" }}
{{- $certFileName := "certificate.json" }}
{{- $checkpointBase := "/mjs/checkpoint" }}
{{- if (and $isNonRoot (empty .Values.checkpointPVC)) }} # If running as non-root user and not mounting checkpointbase, use a directory that a non-root user can create
{{- $checkpointBase = "/tmp/checkpoint" }}
{{- end }}
{{- $localMJSDef := "/tmp/mjs_def.sh" }}
{{- $secretFile := printf "%s/%s" $secretDir $secretFileName }}
{{- $certFile := printf "%s/%s" $secretDir $certFileName }}
{{- $binDir := printf "%s/toolbox/parallel/bin/" $matlabRoot }}
{{- $jobManagerUID := uuidv4 }}
{{- $mjsVolName := "mjs-volume" }}
{{- $logVolName := "log-volume" }}
{{- $checkpointVolName := "checkpoint-volume" }}
{{- $matlabVolName := "matlab-volume" }}
{{- $secretVolName := "secret-volume" }}
{{- $configVolName := "config-volume" }}
{{- $workerStartedFile := "/tmp/worker-started" }}
{{- $matlabImage := .Values.matlabImage | default (printf "mathworks/matlab-deps:%s" .Values.matlabRelease) }}
{{- $basePort := .Values.basePort | int }}
{{- $enableServiceLinks := .Values.enableServiceLinks | default false }}
{{- $commandListenerRestartHours := .Values.commandListenerRestartPeriod | default 12 }}
{{- $commandListenerRestartSeconds := mulf $commandListenerRestartHours 3600 }}

# Create a ConfigMap containing scripts for the job manager pod and worker pods
{{- $mjsConfigMap := "mjs-config" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $mjsConfigMap }}
data:
  mjs_def.sh: |
    # Common mjs_def.sh file for the job manager and workers
    BASE_PORT={{ .Values.basePort }}
    MAX_LINUX_WORKERS={{ .Values.maxWorkers }}
    CHECKPOINTBASE={{ $checkpointBase }}
    PIDBASE=/tmp/pid
    USE_SECURE_COMMUNICATION={{ .Values.useSecureCommunication }}
    REQUIRE_CLIENT_CERTIFICATE={{ .Values.requireClientCertificate }}
    REQUIRE_SCRIPT_VERIFICATION={{ .Values.requireScriptVerification }}
    SECURITY_LEVEL={{ .Values.securityLevel }}
    SHARED_SECRET_FILE={{ $secretFile }}
    USE_ONLINE_LICENSING={{ .Values.useOnlineLicensing }}
  jobManager.sh: |
    # Script to run on the MATLAB Job Scheduler job manager pod
    # Set up the mjs_def file
    cp {{ printf "%s/mjs_def.sh" $mjsDefDir }} {{ $localMJSDef }}
    echo "HOSTNAME={{ $jobManagerHostname }}" >> {{ $localMJSDef }}
    echo "LOGBASE={{ $logBase }}" >> {{ $localMJSDef }}

    # Start the MJS service
    {{ printf "%s/mjs" $binDir }} start -mjsdef {{ $localMJSDef }} -loglevel {{ .Values.logLevel }} -disablereliableconnections

    # Start the job manager
    {{- $jmCommand := printf "%s/startjobmanager -name \"%s\" -baseport %d" $binDir .Values.jobManagerName $basePort }}
    {{- if .Values.requireClientCertificate }}
      {{- $jmCommand = printf "%s -certificate \"%s\"" $jmCommand $certFile }}
    {{- end }}
    {{- if .Values.requireScriptVerification }}
      {{- $jmCommand = printf "%s -secretfile \"%s\"" $jmCommand $secretFile }}
    {{- end }}
    {{ $jmCommand }} || echo "startjobmanager failed; there may already be a job manager running"

    # Keep the container running
    sleep infinity
  worker.sh: |
    # Script to run on worker pods
    # Set up the mjs_def file
    cp {{ printf "%s/mjs_def.sh" $mjsDefDir }} {{ $localMJSDef }}
    LOGBASE={{ $logBase }}/${WORKER_NAME}
    echo "LOGBASE=${LOGBASE}" >> {{ $localMJSDef }}
    echo "HOSTNAME=${HOSTNAME}" >> {{ $localMJSDef }}

    # Ensure log directory exists and is writeable by workers
    if [ ! -d "${LOGBASE}" ]; then
      mkdir "${LOGBASE}"
    fi
    chmod o+w "${LOGBASE}"

    # Create a user to run MATLAB as
    useradd --create-home {{ .Values.workerUsername }}
    echo {{ printf "%s:%s" .Values.workerUsername .Values.workerPassword }} | chpasswd

    # Start the MJS service
    {{ printf "%s/mjs" $binDir }} start -mjsdef {{ $localMJSDef }} -loglevel {{ .Values.logLevel }} -disablereliableconnections

    # Start the worker
    {{- $workerCmd := printf "%s/startworker -jobmanager \"%s\" -jobmanagerhost \"%s\" -name \"${WORKER_NAME}\" -baseport %d" $binDir .Values.jobManagerName $jobManagerHostname $basePort }}
    {{- if .Values.requireScriptVerification }}
      {{- $workerCmd = printf "%s -secretfile \"%s\"" $workerCmd $secretFile }}
    {{- end }}
    {{ $workerCmd }}

    # Add a file to indicate that startworker is complete
    touch {{ $workerStartedFile }}

    # Keep the container running
    sleep infinity
  stopWorker.sh: |
    # Script to gracefully shut down a worker
    # First, wait for startworker to have finished successfully
    while [ ! -f {{ $workerStartedFile | quote }} ]]; do
      echo "Waiting for startworker to finish"
      sleep 1
    done

    # Stop the worker
    {{- $stopCmd := printf "%s/stopworker -clean -name ${WORKER_NAME}" $binDir }}
    {{- if .Values.requireScriptVerification }}
      {{- $stopCmd = printf "%s -secretfile \"%s\"" $stopCmd $secretFile }}
    {{- end }}
    {{ $stopCmd }}
---

{{- $loadBalancerPrefix := "mjs-ingress-proxy" }}
{{- $loadBalancerName := $loadBalancerPrefix }}
{{- if .Values.autoCreateLoadBalancer }}
{{- $loadBalancerName = printf "%s-%s" $loadBalancerPrefix $jobManagerUID | trunc 63 }} # Use a unique name for the auto-generated service
# Create a LoadBalancer service to route external traffic to HAproxy
{{- $lookupPort := add .Values.basePort 6 | int }}
{{- $jobManagerPort := add .Values.basePort 9 | int }}
{{- $numProxies := divf .Values.maxWorkers .Values.workersPerPoolProxy | ceil | int }}
{{- if (not .Values.internalClientsOnly) }} # Load balancer only needed for external clients
apiVersion: v1
kind: Service
metadata:
  name: {{ $loadBalancerName }}
  labels:
    app: {{ $loadBalancerPrefix }}
spec:
  type: LoadBalancer
  selector:
   app: {{ $loadBalancerPrefix }}
  ports:
    # Job manager ports
  - name: "tcp-lookup"
    protocol: TCP
    appProtocol: TCP
    port: {{ $lookupPort }}
    targetPort: {{ $lookupPort }}
  - name: "tcp-jobmanager"
    protocol: TCP
    appProtocol: TCP
    port: {{ $jobManagerPort }}
    targetPort: {{ $jobManagerPort }}

    # Pool proxy ports
{{- range untilStep 0 $numProxies 1 }}
  {{- $poolProxyPort := add $.Values.poolProxyBasePort . }}
  - name: {{ printf "tcp-pool-proxy-%d" (add . 1) }}
    protocol: TCP
    appProtocol: TCP
    port: {{ $poolProxyPort }}
    targetPort: {{ $poolProxyPort }}
{{- end }}
---
{{- end }}
{{- end }}

# Create an internal Service for workers to use to communicate with the job manager
apiVersion: v1
kind: Service
metadata:
  name: {{ $jobManagerHostname }}
  labels:
    app: {{ $jobManagerHostname }}
spec:
  type: ClusterIP

  # Match the job manager pod
  selector:
    app: {{ $jobManagerHostname }}
    job-manager-uid: {{ $jobManagerUID }}

  ports:
  {{- $minPort := $basePort }}
  {{- $maxPort := add $minPort 10 | int }}
  {{- range untilStep $minPort $maxPort 1 }}
  - name: {{ printf "tcp-%d" . }}
    protocol: TCP
    appProtocol: TCP
    port: {{ . }}
    targetPort: {{ . }}
  {{- end }}
---

# Create the controller config file
{{- $controllerName := "mjs-controller" }}
{{- $controllerConfigMap := printf "%s-config" $controllerName }}
{{- $configFileName := "config.json" }}
{{- $controllerLogFile := printf "%s/controller.log" $logBase }}
{{- if empty .Values.logPVC }} # If not mounting logs, do not write controller logs to a file
{{- $controllerLogFile = "" }}
{{- end }}
{{- $poolProxyImageTag := .Values.poolProxyImageTag | default .Values.matlabRelease }}
{{- $controllerImageTag := .Values.controllerImageTag | default .Chart.AppVersion }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $controllerConfigMap }}
data:
  {{ $configFileName }}: |
    {
      "BasePort": {{ $basePort }},
      "CertFileName": {{ $certFileName | quote }},
      "CheckpointBase": {{ $checkpointBase | quote }},
      "CheckpointPVC": {{ .Values.checkpointPVC | quote }},
      "ClusterHost": {{ .Values.clusterHost | quote }},
      "ControllerLogfile": {{ $controllerLogFile | quote }},
      "Debug": {{ .Values.debug | default false }},
      "DeploymentName": {{ $controllerName | quote}},
      "EnableServiceLinks": {{ $enableServiceLinks }},
      "JobManagerUID": {{ $jobManagerUID | quote }},
      "IdleStop": {{ .Values.idleStop }},
      "InternalClientsOnly": {{ .Values.internalClientsOnly }},
      "MatlabImage": {{ $matlabImage | quote }},
      "MatlabImagePullPolicy": {{ .Values.matlabImagePullPolicy | quote }},
      "JobManagerName": {{ .Values.jobManagerName | quote }},
      "JobManagerCPULimit": {{ .Values.jobManagerCPULimit | quote }},
      "JobManagerCPURequest": {{ .Values.jobManagerCPURequest | quote }},
      "JobManagerMemoryLimit": {{ .Values.jobManagerMemoryLimit | quote }},
      "JobManagerMemoryRequest": {{ .Values.jobManagerMemoryRequest | quote }},
      "JobManagerGroupID": {{ .Values.jobManagerGroupID }},
      "JobManagerUserID": {{ .Values.jobManagerUserID }},
      "LivenessProbeFailureThreshold": {{ .Values.livenessProbeFailureThreshold | default 3 }},
      "LivenessProbePeriod": {{ .Values.livenessProbePeriod | default  300 }},
      "LivenessProbeTimeout": {{ .Values.livenessProbeTimeout | default 30 }},
      "LoadBalancerName": {{ $loadBalancerName | quote }},
      "LogBase": {{ $logBase | quote }},
      "LogLevel": {{ .Values.logLevel }},
      "LogPVC": {{ .Values.logPVC | quote }},
      "MatlabPVC": {{ .Values.matlabPVC | default "" | quote }},
      "MatlabRoot": {{ $matlabRoot | quote }},
      "MaxWorkers": {{ .Values.maxWorkers }},
      "MinWorkers": {{ .Values.minWorkers }},
      "MJSDefConfigMap": {{ $mjsConfigMap | quote }},
      "MJSDefDir" : {{ $mjsDefDir | quote }},
      "Namespace": {{ .Release.Namespace | quote }},
      "NetworkLicenseManager": {{ .Values.networkLicenseManager | quote }},
      "OverrideWrapperPhoenix": {{ not .Values.useDefaultWrapperPhoenix }},
      "Period": {{ .Values.autoScalingPeriod }},
      "PortsPerWorker": {{ .Values.portsPerWorker | default 2 }},
      "PoolProxyBasePort": {{ .Values.poolProxyBasePort }},
      "PoolProxyCPULimit": {{ .Values.poolProxyCPULimit | quote }},
      "PoolProxyCPURequest": {{ .Values.poolProxyCPURequest | quote }},
      "PoolProxyImage": {{ printf "%s:%s" .Values.poolProxyImage $poolProxyImageTag | quote }},
      "PoolProxyImagePullPolicy": {{ .Values.poolProxyImagePullPolicy | quote }},
      "PoolProxyMemoryLimit": {{ .Values.poolProxyMemoryLimit | quote }},
      "PoolProxyMemoryRequest": {{ .Values.poolProxyMemoryRequest | quote }},
      "ResizePath": {{ printf "%s/toolbox/parallel/bin/resize" $matlabRoot | quote }},
      "RequireClientCertificate": {{ .Values.requireClientCertificate }},
      "RequireScriptVerification": {{ .Values.requireScriptVerification }},
      "SecretDir": {{ $secretDir | quote }},
      "SecretFileName": {{ $secretFileName | quote }},
      "SecurityLevel": {{ .Values.securityLevel }},
      "StartupProbeFailureThreshold": {{ .Values.startupProbeFailureThreshold | default 60 }},
      "StartupProbeInitialDelay": {{ .Values.startupProbeInitialDelay | default 5 }},
      "StartupProbePeriod": {{ .Values.startupProbePeriod | default 1 }},
      "StopWorkerGracePeriod": {{ .Values.stopWorkerGracePeriod }},
      "WorkerCPULimit": {{ .Values.workerCPULimit | quote }},
      "WorkerCPURequest": {{ .Values.workerCPURequest | quote }},
      "WorkerMemoryLimit": {{ .Values.workerMemoryLimit | quote }},
      "WorkerMemoryRequest": {{ .Values.workerMemoryRequest | quote }},
      "WorkerLogPVC": {{ .Values.workerLogPVC | quote }},
      "WorkerPassword": {{ .Values.workerPassword | quote }},
      "WorkersPerPoolProxy": {{ .Values.workersPerPoolProxy }},
      "WorkerUsername": {{ .Values.workerUsername | quote }},
      "UsePoolProxy": {{ .Values.usePoolProxy | default true }},
      "UseSecureCommunication": {{ .Values.useSecureCommunication }}
    }
---

# Create the controller deployment
{{- $controllerAccount := printf "%s-account" $controllerName }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $controllerName }}
spec:
  selector:
    matchLabels:
      app: {{ $controllerName }}
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ $controllerName }}
    spec:
      # Controller requires elevated Kubernetes permissions
      serviceAccountName: {{ $controllerAccount }}

      # If set to false, disable creation of environment variables for services
      enableServiceLinks: {{ $enableServiceLinks }}

      # Define the controller container
      containers:
      - name: {{ $controllerName }}
        image: {{ printf "%s:%s" .Values.controllerImage $controllerImageTag }}
        imagePullPolicy: {{ .Values.controllerImagePullPolicy }}

        # The controller process requires the path to a config file as an input argument
        # This file is mounted from a ConfigMap (defined in mjs.yaml)
        {{- $configMapDir := "/config/" }}
        args:
        - {{ printf "-config=%s/%s" $configMapDir $configFileName }}

        # Mount the config file from the ConfigMap
        volumeMounts:
        - name: {{ $configVolName }}
          mountPath: {{ $configMapDir }}

        # Store controller logs in the same directory as the job manager logs
        {{- if .Values.logPVC }}
        - name: {{ $logVolName }}
          mountPath: {{ $logBase }}
        {{- end }}

      volumes:
      - name: {{ $configVolName }}
        configMap:
          name: {{ $controllerConfigMap }}
      {{- if .Values.logPVC }}
      - name: {{ $logVolName }}
        persistentVolumeClaim:
          claimName: {{ .Values.logPVC }}
      {{- end }}
---

# Create a service account for the controller
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $controllerAccount }}
---

# Create a role with permissions to interact with the Kubernetes cluster
{{- $controllerRole := printf "%s-role" $controllerName }}
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $controllerRole }}
rules:
- apiGroups: [""]
  resources: ["pods", "services", "secrets"]
  verbs: ["create", "get", "list", "delete", "update"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["create", "get", "list", "delete", "update"]
---

# Bind the role to the service account
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ printf "%s-rolebinding" $controllerName }}
subjects:
- kind: ServiceAccount
  name: {{ $controllerAccount }}
roleRef:
  kind: Role
  name: {{ $controllerRole }}
  apiGroup: rbac.authorization.k8s.io
