# Template for a deployment running HAproxy.
# This proxies incoming connections to the job manager
# or workers via a single external load balancer.
# Copyright 2024 The MathWorks, Inc.
{{- if (not .Values.internalClientsOnly) }} # Only need HAproxy if we support clients outside of Kubernetes

# Create the HAproxy config file; this configures
# proxying of connections based on TCP port.
{{- $poolProxyPrefix := "mjs-pool-proxy" }}
{{- $configMapName := "haproxy-config" }}
{{- $configFileName := "haproxy.cfg" }}
{{- $numProxies := divf .Values.maxWorkers .Values.workersPerPoolProxy | ceil | int }}
{{- $minPortAllWorkers := add $.Values.basePort 10 | int }} # Minimum worker port if not using a parallel pool proxy
{{- $name := "mjs-ingress-proxy" }}
{{- $lookupPort := add .Values.basePort 6 | int }}
{{- $jobManagerPort := add .Values.basePort 9 | int }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $configMapName }}
data:
  {{ $configFileName }}: |
    global
        log stdout local0
    defaults
        default-server init-addr last,libc,none
        log global
        option tcplog
        mode tcp
        timeout connect 30s
        timeout client 300s
        timeout server 300s
    # Rules for proxying traffic to the job manager pod.
    frontend front-lookup
        bind {{ printf "*:%d" $lookupPort }}
        default_backend back-mjs-job-manager
    frontend front-jobmanager
        bind {{ printf "*:%d" $jobManagerPort }}
        default_backend back-mjs-job-manager
    backend back-mjs-job-manager
        server mjs-job-manager mjs-job-manager
{{- if .Values.usePoolProxy | default true }}
    # Rules for proxying traffic to the parallel pool proxies.
    # Each parallel pool proxy has a unique port, which should be mapped to the
    # corresponding Kubernetes service for that proxy.
  {{- range untilStep 0 $numProxies 1 }}
    {{- $portNum := add $.Values.poolProxyBasePort . | int }}
    {{- $poolProxyName := printf "%s-%d" $poolProxyPrefix (add . 1) }}
    frontend front-{{ $poolProxyName }}
        bind {{ printf "*:%d" $portNum }}
        default_backend back-{{ $poolProxyName }}
    backend back-{{ $poolProxyName }}
        server {{ $poolProxyName }} {{ $poolProxyName }}
  {{- end }}
{{- else }}
    # Rules for proxying parallel pool traffic to the workers.
    # Each worker has a set of unique ports, which should be mapped to the
    # corresponding Kubernetes service for that worker.
  {{- range untilStep 0 (.Values.maxWorkers | int) 1 }}
    {{- $workerName := printf "mjs-worker-%d" (add . 1) }}
    {{- $minPort := add $minPortAllWorkers (mul $.Values.portsPerWorker .) | int }}
    {{- range untilStep 0 ($.Values.portsPerWorker | int) 1 }}
    frontend {{ printf "front-%s-%d" $workerName . }}
      bind {{ printf "*:%d" (add $minPort .) }}
      default_backend back-{{ $workerName }}
    {{- end }}
    backend back-{{ $workerName }}
      server {{ $workerName }} {{ $workerName }}
  {{- end }}
{{- end }}
---

# Create the HAproxy deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
spec:
  selector:
    matchLabels:
      app: {{ $name }}
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ $name }}
    spec:
      # If set to false, disable creation of environment variables for services
      enableServiceLinks: {{ .Values.enableServicelinks | default false }}

      containers:
        - name: haproxy
          image: {{ $.Values.haproxyImage }}
          imagePullPolicy: {{ $.Values.haproxyImagePullPolicy }}

          # Pass the config file path as an input argument
          {{- $configDir := "/usr/local/etc/haproxy/" }}
          args:
          - "-f"
          - {{ printf "%s/%s" $configDir $configFileName }}

          # Mount the config file from the ConfigMap
          {{- $configVolName := "config-volume" }}
          volumeMounts:
            - name: {{ $configVolName }}
              mountPath: {{ $configDir }}

      volumes:
        - name: {{ $configVolName }}
          configMap:
            name: {{ $configMapName }}
---

# Create a Kubernetes Service for each HAproxy backend
# (HAproxy will error if a backend cannot be found)
{{- if .Values.usePoolProxy | default true }}
  {{- range untilStep 0 $numProxies 1 }}
    {{- $portNum := add $.Values.poolProxyBasePort . | int }}
    {{- $poolProxyNum := add . 1 }}
    {{- $poolProxyName := printf "%s-%d" $poolProxyPrefix $poolProxyNum }}
apiVersion: v1
kind: Service
metadata:
  name: {{ $poolProxyName }}
  labels:
    app: {{ $poolProxyPrefix }}
    proxyName: {{ $poolProxyName }}
    port: {{ $portNum | quote }}
    proxyID: {{ $poolProxyNum | quote }}
spec:
  type: ClusterIP
  selector:
    proxyName: {{ $poolProxyName }}
  ports:
  - protocol: TCP
    port: {{ $portNum }}
    targetPort: {{ $portNum }}
---
  {{- end }}
{{- else }}
  {{- $minPortAllWorkers := add $.Values.basePort 10 | int }}
  {{- range untilStep 0 (.Values.maxWorkers | int) 1 }}
    {{- $workerName := printf "mjs-worker-%d" (add . 1) }}
apiVersion: v1
kind: Service
metadata:
  name: {{ $workerName }}
spec:
  # Match to the MJS worker pod
  selector:
    workerName: {{ $workerName }}

  # Expose unique pool ports needed by this worker
  ports:
    {{- $minPort := add $minPortAllWorkers (mul $.Values.portsPerWorker .) | int }}
    {{- range untilStep 0 ($.Values.portsPerWorker | int) 1 }}
  - name: {{ printf "tcp-%d" . }}
    protocol: TCP
    port: {{ add $minPort . }}
    targetPort: {{ add $minPort . }}
    {{- end }}
  {{- end }}
---
{{- end }}
{{- end }}
